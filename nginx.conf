
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
error_log  logs/error.log  info;
pid        logs/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  10;
    send_timeout 5m;

    #gzip  on;

    #shared memory
    lua_shared_dict auth_cache 10m;


    #load lua-libraries
    init_by_lua_file conf/lua/init_libs.lua;

    server {
        listen       80;
        server_name  localhost;

	# server settings
	include directives/server_variables.conf;

	# internal path
	location @init {
	    set $x_req_uri "";
            set $x_req_method "";
	}

	location /scanp {
	    include directives/proxy_set_headers.conf;
	    access_by_lua_file conf/lua/auth_agent.lua;
	}

        #charset koi8-r;

        #access_log  logs/host.access.log  main;
        location / {
            root   html;
            index  index.html index.htm;
        }

	location /auth/policy/agent {
	    proxy_pass http://nsp.nsp.ricoh.co.jp:10080/auth/policy/agent;
	    proxy_redirect default;
	    proxy_set_header X-Request-Uri $x_req_uri;
	    proxy_set_header X-Request-Method $x_req_method;
	}

	location /auth {
	    proxy_pass http://nsp.nsp.ricoh.co.jp:10080/auth;
	    proxy_redirect default;
	}

	location /redis {
	    content_by_lua '
	       local redis = require "resty.redis"
	       local red = redis:new()
	       red:set_timeout(3000)
	       local ok, err = red:connect("127.0.0.1", 6379)

 	       if not ok then
                 ngx.say("failed to connect: ", err)
                 return
               end

               red:init_pipeline()
               red:set("cat", "Marry")
	       red:set("horse", "Bob")
               red:get("cat")
               red:get("horse")
               local results, err = red:commit_pipeline()

               if not results then
                  ngx.say("failed to commit the pipelined requests: ", err)
                  return
               end

	       ngx.say("hoge2")
            ';
	}


        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443;
    #    server_name  localhost;

    #    ssl                  on;
    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_timeout  5m;

    #    ssl_protocols  SSLv2 SSLv3 TLSv1;
    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers   on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
